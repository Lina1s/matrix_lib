#include "../matrix_lib/matrix_lib.h"
#include <gtest/gtest.h>

static double sum(const matrix_lib::Matrix &mat) {
    double res = 0;
    for (size_t i = 0; i < mat.rows(); ++i) {
        for (size_t j = 0; j < mat.columns(); ++j) {
            res += std::abs(mat[i][j]);
        }
    }
    return res;
}
static double precision = 1e-7;

TEST(TestNull, square) {
    matrix_lib::Matrix left, ns;
    size_t r;

    left = matrix_lib::Matrix{{38, -43, -31}, {-18, 41, -4}, {50, -28, 5}};
    r = matrix_lib::rank(left);
    ns = matrix_lib::nullspace(left);
    EXPECT_EQ(ns.columns(), left.columns() - r);
    EXPECT_EQ(matrix_lib::rank(ns), std::min(ns.rows(), ns.columns()));
    EXPECT_LT(sum(left * ns), precision);



    left = matrix_lib::Matrix{{-24, -47, 3, 34, -36}, {-28, 49, -10, 36, -19}, {40, -25, 23, -16, -36}, {-6, 6, 37, 30, 50}, {33, 12, -18, 43, -3}};
    r = matrix_lib::rank(left);
    ns = matrix_lib::nullspace(left);
    EXPECT_EQ(ns.columns(), left.columns() - r);
    EXPECT_EQ(matrix_lib::rank(ns), std::min(ns.rows(), ns.columns()));
    EXPECT_LT(sum(left * ns), precision);



    left = matrix_lib::Matrix{{-25, 17}, {10, 27}};
    r = matrix_lib::rank(left);
    ns = matrix_lib::nullspace(left);
    EXPECT_EQ(ns.columns(), left.columns() - r);
    EXPECT_EQ(matrix_lib::rank(ns), std::min(ns.rows(), ns.columns()));
    EXPECT_LT(sum(left * ns), precision);



    left = matrix_lib::Matrix{{-36, -1, 48, -14, 35, -2, 22, 18, -16, 44, 13, 3, -31, -20, -6, 12}, {17, 18, -11, -23, -1, -48, -33, 5, 25, -12, -35, 21, 6, -9, -46, 42}, {-37, 15, 14, -19, -37, -4, 0, -9, 30, 49, 32, -1, -4, 25, -10, 29}, {-28, -7, 14, -42, -25, -45, 46, 6, 23, -7, -40, 32, -8, 17, -34, 34}, {-1, -21, 46, 31, 6, 22, -9, -40, -44, 30, 39, -12, -18, -27, 37, -43}, {-17, -21, 31, -2, 30, -19, 17, 16, -34, 0, -14, 35, 14, 8, -27, 6}, {-8, 46, 29, 31, 13, 42, -11, 49, -48, 22, 1, 36, 20, 37, 31, 6}, {14, -9, 18, -48, -31, 19, -49, -25, -1, -36, 29, 41, 43, 5, -24, 48}, {23, 27, -47, 12, -31, -12, -18, 12, -13, -12, 49, 32, 34, 37, -38, 9}, {-48, 25, -20, -40, 35, 36, 18, 15, 47, -22, -23, 9, 44, 34, 7, -42}, {-23, 35, 41, -12, 36, -45, -13, 4, 3, -20, -25, 22, 11, 50, -31, -48}, {11, -20, -23, -33, -50, -10, -8, -2, -43, -31, -23, 34, -41, 33, -17, -47}, {31, 8, -12, -19, 7, 22, 20, -11, -5, -40, -29, -4, -48, -16, 49, -4}, {-40, 34, 7, 12, -23, 6, -47, -26, 37, 42, -5, -37, -28, -4, -28, -49}, {-45, -20, -17, 33, -34, -1, 22, -25, -1, -49, -40, 50, -35, -34, 36, -22}, {38, 24, -21, 40, 12, -21, 13, -39, -31, -43, -20, 23, 15, 31, -9, 28}};
    r = matrix_lib::rank(left);
    ns = matrix_lib::nullspace(left);
    EXPECT_EQ(ns.columns(), left.columns() - r);
    EXPECT_EQ(matrix_lib::rank(ns), std::min(ns.rows(), ns.columns()));
    EXPECT_LT(sum(left * ns), precision);



    left = matrix_lib::Matrix{{-24, 2, 8, -29, 26, 13, -34, -41, 11, 42, -39, -24}, {44, -48, -18, -36, -13, 5, 21, -3, 10, -7, 30, -12}, {16, 17, -19, 40, 50, -17, 32, -47, -27, 9, -4, 4}, {22, 50, -24, -27, 21, -23, 50, -21, -45, 30, -11, 49}, {12, 37, 23, -40, -50, -23, -22, -15, 14, -45, -29, 2}, {15, -34, -33, 38, -50, 27, -17, 13, -2, 15, -12, -12}, {-24, 3, 48, -43, -32, 6, 18, 20, 49, -49, -28, -24}, {-22, 21, -29, -36, -6, -48, 20, 45, -44, -18, 46, -20}, {6, -47, 32, -6, 24, -8, -37, -10, -18, 34, -38, -33}, {13, 16, 27, 7, -20, 3, -28, 10, -3, 13, -27, 32}, {2, -28, 36, 42, 10, -41, -37, -21, 21, 49, -21, 6}, {35, -13, -34, 23, 33, 4, -27, 0, -14, -14, 1, 11}};
    r = matrix_lib::rank(left);
    ns = matrix_lib::nullspace(left);
    EXPECT_EQ(ns.columns(), left.columns() - r);
    EXPECT_EQ(matrix_lib::rank(ns), std::min(ns.rows(), ns.columns()));
    EXPECT_LT(sum(left * ns), precision);



    left = matrix_lib::Matrix{{-2, -41, 11, 23, 39, -25, 38, -14}, {-36, 37, 21, 23, 5, 27, 39, 26}, {45, -12, 16, -36, 50, 15, -2, 47}, {4, -33, 37, 23, 31, 36, -28, 40}, {44, -29, -40, -21, 23, 45, -11, 4}, {36, 11, -47, -27, 1, 15, 8, 5}, {-4, 15, -40, 46, -45, 46, -16, -4}, {7, 49, -36, 26, -34, -21, -18, 31}};
    r = matrix_lib::rank(left);
    ns = matrix_lib::nullspace(left);
    EXPECT_EQ(ns.columns(), left.columns() - r);
    EXPECT_EQ(matrix_lib::rank(ns), std::min(ns.rows(), ns.columns()));
    EXPECT_LT(sum(left * ns), precision);



    left = matrix_lib::Matrix{{-33, 28, -27, -47, 42, 37, 24, 49, 44, 38, 34}, {-45, 28, 16, 16, -34, 23, 15, 17, -25, 17, -47}, {1, -3, 35, 20, -17, 35, 34, 36, 46, -49, 16}, {-48, -4, -6, -43, -23, 11, -13, 5, -33, 5, 12}, {15, 15, 4, 26, 36, -23, 5, 37, 9, 20, -1}, {-13, 2, 11, -36, -2, -13, -31, 21, 20, -5, 11}, {-22, 22, 19, 47, -10, 28, -33, -45, -45, 26, 20}, {0, 28, 42, -6, 14, 9, 40, -37, -5, 5, 27}, {13, 39, -33, -12, 12, -28, -37, -14, 36, 12, -44}, {24, 17, -38, -15, -19, -19, -36, 32, -29, -33, -2}, {-31, -32, -16, 23, -35, 20, -38, 19, 1, 44, 44}};
    r = matrix_lib::rank(left);
    ns = matrix_lib::nullspace(left);
    EXPECT_EQ(ns.columns(), left.columns() - r);
    EXPECT_EQ(matrix_lib::rank(ns), std::min(ns.rows(), ns.columns()));
    EXPECT_LT(sum(left * ns), precision);



    left = matrix_lib::Matrix{{-46, -25}, {19, 15}};
    r = matrix_lib::rank(left);
    ns = matrix_lib::nullspace(left);
    EXPECT_EQ(ns.columns(), left.columns() - r);
    EXPECT_EQ(matrix_lib::rank(ns), std::min(ns.rows(), ns.columns()));
    EXPECT_LT(sum(left * ns), precision);



    left = matrix_lib::Matrix{{-47, -15, -44, 20, -16, -9, -20, 50, -29, 48, 27, 27, 23, -28, 15, 10, 33}, {27, 16, 0, 42, -26, -4, -17, -48, 14, 48, 3, -41, -40, -3, 27, 10, -22}, {-15, -14, 34, 34, -45, 23, 45, -24, 47, -28, -1, 2, -18, -40, -10, 38, -7}, {-39, 48, 5, -11, -20, 38, 0, 6, 6, 17, 41, -25, 18, -26, -10, -44, -29}, {-16, -13, -42, -12, 31, 5, 27, 8, 46, 39, -12, -5, 27, -4, -14, 18, -26}, {-37, -11, -39, 44, 41, -48, 5, -14, -46, 15, 47, 39, -15, 34, -29, -25, -37}, {38, 40, -49, 39, 45, 14, -34, 20, -31, -26, -43, 33, 9, -9, -6, 6, 17}, {9, -16, 5, -49, 37, -36, -47, -20, -19, 11, -20, 2, 23, 18, 18, -43, 33}, {-47, 16, 4, -10, 27, -17, 34, -38, -14, 34, -21, -5, 35, 14, 49, 19, -42}, {9, -7, -48, -24, -46, -27, -46, 0, 9, -40, -8, 8, 37, 28, -44, 35, 50}, {-34, -45, 40, 25, -45, -33, 45, 49, 46, -3, 6, 29, -18, -22, -47, 11, 37}, {12, 27, -37, -31, -18, 4, 4, -38, 28, 24, 11, 19, -44, -3, -46, 32, -23}, {8, -31, 17, 37, -7, -17, 48, 13, 20, -40, 20, -32, 10, -48, -42, -7, -15}, {-30, -28, 40, -32, -19, 7, 5, -31, -33, -40, 24, -15, -36, -33, 30, -27, -36}, {-30, -16, -15, 13, 10, -16, -38, 33, -34, -2, 6, -15, 37, -37, 27, -22, 46}, {-17, -6, 15, 7, 32, 33, -14, 38, 19, 31, 13, 1, 39, 32, -16, 14, -6}, {-31, 26, -10, 15, 25, -9, 36, -12, 44, -28, 15, 40, -35, 20, 27, -42, -33}};
    r = matrix_lib::rank(left);
    ns = matrix_lib::nullspace(left);
    EXPECT_EQ(ns.columns(), left.columns() - r);
    EXPECT_EQ(matrix_lib::rank(ns), std::min(ns.rows(), ns.columns()));
    EXPECT_LT(sum(left * ns), precision);



    left = matrix_lib::Matrix{{33, 27, -46, 11, -15, 22, 17, 30, -22, 23}, {-19, 50, -47, 22, -38, -13, -39, -29, 45, 6}, {-3, -13, -9, -8, -49, 10, -41, 5, 19, 14}, {-5, -12, -9, -10, 46, 47, -3, -21, 42, -7}, {-33, -19, 7, 10, -25, -31, 26, 47, 44, 44}, {11, 47, 41, 11, 21, 26, -19, 40, 46, -12}, {31, -41, 43, 24, -8, -1, -18, 4, -23, 14}, {-1, -26, -3, 42, 1, -37, -32, -48, 32, 36}, {4, 19, 49, -21, 13, -6, 31, -19, -24, -2}, {-23, -13, -20, 0, 41, -44, 44, 46, 34, 21}};
    r = matrix_lib::rank(left);
    ns = matrix_lib::nullspace(left);
    EXPECT_EQ(ns.columns(), left.columns() - r);
    EXPECT_EQ(matrix_lib::rank(ns), std::min(ns.rows(), ns.columns()));
    EXPECT_LT(sum(left * ns), precision);



    left = matrix_lib::Matrix{{-1, 2, 0, 45, 43, 34, 42}, {0, 3, 10, 15, -42, 11, 21}, {5, -47, 37, -34, -26, 26, -33}, {-2, -31, 49, 48, 25, 49, -48}, {-28, 16, -15, -47, -20, 14, 3}, {-42, 13, -8, 10, 6, 3, -34}, {44, -30, 4, -2, 48, -15, 0}};
    r = matrix_lib::rank(left);
    ns = matrix_lib::nullspace(left);
    EXPECT_EQ(ns.columns(), left.columns() - r);
    EXPECT_EQ(matrix_lib::rank(ns), std::min(ns.rows(), ns.columns()));
    EXPECT_LT(sum(left * ns), precision);



    left = matrix_lib::Matrix{{-29, -45, 8, -20, 44, 43, 35, 14, 12, -34, -12}, {30, 2, 11, -24, 27, -37, -44, 13, -32, -44, -46}, {48, -36, -9, -47, -3, 2, 24, -12, 38, 27, 18}, {25, 9, -37, -15, -9, -19, -23, -29, 31, -32, -29}, {2, -38, -21, -15, 16, -30, -34, 2, -24, 25, 6}, {3, 12, 14, -23, 34, -31, -36, -43, 40, -28, 20}, {27, 9, 17, -28, 4, 42, -29, -44, -43, -14, -25}, {50, 29, 30, 50, 15, -34, -37, 30, 26, -25, -43}, {-26, -36, -33, -28, -31, -39, 30, 35, -10, -36, -36}, {-32, 18, 20, 27, 34, -26, -26, 16, 20, 36, -48}, {-31, 7, -4, 5, -7, 23, -26, 9, -31, 37, -30}};
    r = matrix_lib::rank(left);
    ns = matrix_lib::nullspace(left);
    EXPECT_EQ(ns.columns(), left.columns() - r);
    EXPECT_EQ(matrix_lib::rank(ns), std::min(ns.rows(), ns.columns()));
    EXPECT_LT(sum(left * ns), precision);



    left = matrix_lib::Matrix{{33, -44, -42, 20, 18, -35, -2, 37, -46, -9, -16}, {-42, 6, -21, -2, 16, -29, -9, 37, 24, -1, -35}, {13, -47, -23, 45, -22, 38, -39, 23, 2, 39, -26}, {-27, 39, 15, -46, -20, -17, -47, -26, 19, -9, 43}, {29, -5, 34, 2, -30, 8, -12, -45, -22, 41, 35}, {35, 40, 38, -22, 21, 3, 16, 48, -21, -39, 41}, {32, -44, -30, -26, 32, 18, -45, 34, -20, 29, -18}, {-30, 1, 36, 13, 2, -24, -36, 2, 46, 44, -32}, {-41, -4, -2, -15, -32, -6, 36, -14, -19, 29, 27}, {-3, -8, 1, -35, 24, 34, -24, -18, 31, 46, 37}, {-14, -18, -44, -47, -16, -38, -11, -21, 44, 16, 29}};
    r = matrix_lib::rank(left);
    ns = matrix_lib::nullspace(left);
    EXPECT_EQ(ns.columns(), left.columns() - r);
    EXPECT_EQ(matrix_lib::rank(ns), std::min(ns.rows(), ns.columns()));
    EXPECT_LT(sum(left * ns), precision);



    left = matrix_lib::Matrix{{-17, -6, -46, -38, -22, 26, -27, -41, -43, -23, -3}, {-29, -31, 3, -49, -39, -1, -33, 4, -44, 11, 42}, {-44, -7, 41, 40, 47, -26, 8, -46, -13, -33, 8}, {-4, 17, 36, -20, -7, -17, -33, -12, -44, -25, -9}, {-34, -35, -19, -4, 7, 11, 40, -9, 9, -6, -46}, {5, 38, -3, 31, 17, 2, -18, 41, -22, 50, 1}, {48, -20, 11, -17, 45, 15, -20, 17, -28, 2, -5}, {31, -8, 18, 12, -22, 43, 24, -46, 45, -16, -34}, {42, 37, -13, 16, 9, 34, 13, 46, 4, 32, 12}, {44, -5, -13, -24, 16, 1, -43, 25, -14, 40, 50}, {-40, 37, -3, -36, 50, -22, -39, -10, 22, -10, -34}};
    r = matrix_lib::rank(left);
    ns = matrix_lib::nullspace(left);
    EXPECT_EQ(ns.columns(), left.columns() - r);
    EXPECT_EQ(matrix_lib::rank(ns), std::min(ns.rows(), ns.columns()));
    EXPECT_LT(sum(left * ns), precision);



    left = matrix_lib::Matrix{{-37, -43, 8, -7, -48, -21}, {-33, -17, -12, -19, -19, -3}, {42, 9, 21, -38, -49, -49}, {-14, 22, -40, -39, -25, -37}, {11, -3, -46, -41, 28, 50}, {37, 11, -8, -22, 24, 26}};
    r = matrix_lib::rank(left);
    ns = matrix_lib::nullspace(left);
    EXPECT_EQ(ns.columns(), left.columns() - r);
    EXPECT_EQ(matrix_lib::rank(ns), std::min(ns.rows(), ns.columns()));
    EXPECT_LT(sum(left * ns), precision);



    left = matrix_lib::Matrix{{-16, 27, -44, -3, -3, -44, 45, 15, 49, -14, -14, 45, 27, -5, 5, -25}, {33, 13, -46, 35, -36, -17, -19, 8, -24, -27, -11, -42, 22, -34, 23, 27}, {-24, -35, 48, -38, -3, -7, 28, -44, -46, 20, 21, -36, -8, 1, -17, 33}, {44, -2, 40, 23, 13, -31, -2, 9, -47, -25, 47, -16, -35, 35, -2, -29}, {23, -11, 34, -29, -15, 47, -12, 8, -10, -20, 21, -3, 43, 22, -7, 12}, {-9, -47, 12, 25, 35, -35, 34, 39, -4, 34, -31, -28, 50, -32, 1, -50}, {-16, -14, 40, -3, -32, 9, -29, 35, 33, 14, 37, 14, -40, 27, 49, 12}, {-33, -10, -42, -42, 42, -13, 11, -43, 22, -26, -49, 39, -44, 25, 40, 23}, {19, 26, 48, -15, -27, -10, -40, 16, -14, 26, 48, 10, 18, -26, -6, 48}, {-4, -39, -40, -45, -47, 45, 20, -23, -46, -34, -45, -4, -11, -6, 2, -28}, {-16, 6, -45, 33, 6, 0, 19, 1, -16, 38, -46, -23, -19, -7, -28, 31}, {-28, -24, -42, 35, -48, -5, 44, 31, -15, -39, 41, -2, 8, -6, 12, -14}, {29, 8, 50, 9, -10, 1, 20, 43, -42, -13, -38, 47, 11, 33, -6, 1}, {44, -17, -35, 31, 25, 39, -8, 47, 41, 3, 28, 1, 12, -35, 34, 11}, {-16, -30, -45, -28, 1, 50, 47, -16, 50, 9, 39, -22, 19, -25, -2, 24}, {50, -33, -35, 42, -16, -36, 8, 35, 33, -45, -43, -10, 43, 29, 5, 32}};
    r = matrix_lib::rank(left);
    ns = matrix_lib::nullspace(left);
    EXPECT_EQ(ns.columns(), left.columns() - r);
    EXPECT_EQ(matrix_lib::rank(ns), std::min(ns.rows(), ns.columns()));
    EXPECT_LT(sum(left * ns), precision);



    left = matrix_lib::Matrix{{4, -11, 25, 42, 34, -30, -18, -34, 36, -11, 6, -2, 9, -46, 47, 18}, {-17, -50, -45, -5, 35, 12, 49, -43, 12, 48, 22, -1, 29, -49, -25, 20}, {22, 37, 19, 37, -13, -19, 27, -23, 38, -15, -14, -14, 6, 42, -40, -37}, {-46, -35, 42, 20, 11, 48, 26, 20, 16, 40, 37, 42, -16, -18, 9, 41}, {-12, 32, 7, -42, -47, 6, -33, 45, 47, 40, -38, 27, -20, -37, 20, 20}, {50, -30, -43, 4, 21, 43, 31, -30, -19, 19, -4, -34, 28, 4, -1, 28}, {27, -42, -24, -33, -40, -38, -42, -9, 22, 16, -25, -49, 50, 37, -9, 19}, {-11, -39, -35, -37, -14, -44, -43, -26, 34, -13, -39, -18, -28, -9, -16, -25}, {0, 46, 2, -11, -22, 49, -8, -12, -36, 47, -12, -32, 12, 45, -5, 22}, {27, 40, 48, 16, -46, -10, -38, -22, 8, -12, 2, 15, -43, -30, 32, 36}, {-34, -6, -25, 18, -11, -18, -20, 0, -15, -1, 9, 49, -1, 23, 11, -39}, {23, -31, -5, 27, 31, -11, -48, 26, 29, 39, 40, -3, 34, 42, 34, -34}, {-34, 19, 40, 25, 48, -30, -42, -37, -20, -20, 28, -24, -7, -37, -16, 50}, {21, -43, -8, -4, 3, 23, -17, -19, 12, -45, 10, -28, 36, -34, -18, -2}, {-42, -11, 20, 30, -1, 21, 6, 34, 7, -48, -2, 26, -44, -36, 20, 14}, {-25, 40, -18, 6, 7, -23, -21, 6, 23, 22, -7, -20, 49, 8, -28, -41}};
    r = matrix_lib::rank(left);
    ns = matrix_lib::nullspace(left);
    EXPECT_EQ(ns.columns(), left.columns() - r);
    EXPECT_EQ(matrix_lib::rank(ns), std::min(ns.rows(), ns.columns()));
    EXPECT_LT(sum(left * ns), precision);



    left = matrix_lib::Matrix{{0, -24, 7, -24, 23, 35, 35, -29, -39, 45, 33, 45, -2, -25, -32}, {-32, -2, -9, 12, -22, -34, 24, 28, -22, 1, 27, 27, 8, 14, -30}, {-41, -44, -4, -43, -45, 18, 28, 17, -2, -1, -49, 28, 48, 17, 26}, {-49, -35, 18, 25, 21, -19, -19, 7, 32, 18, -30, -1, 3, -29, 26}, {-41, -12, -21, -27, -2, 6, -1, 40, -25, -47, 22, 36, 12, 3, 11}, {38, 36, -34, -5, -42, 36, -21, -30, 45, -6, 5, -40, 11, -37, -49}, {18, -1, -18, -7, -39, -7, -14, -41, 50, -13, -33, -30, -29, -36, 41}, {24, 18, 49, 9, -10, -27, -27, 45, 5, 18, -35, -35, -23, -30, -4}, {-25, -30, 8, -44, -7, 49, 48, 22, -24, 43, 49, 19, -4, -28, -6}, {39, -32, 17, 1, 8, 38, 37, 14, -28, 31, 17, -9, 37, -4, 39}, {10, -31, 0, 13, -20, -21, -41, -23, 22, 5, 40, -39, 0, -38, -49}, {-47, -15, 33, 44, 18, -34, -44, 38, 14, 23, -2, 22, 8, 37, -44}, {3, 40, 8, 18, -9, -24, -13, 9, -24, -50, 42, 15, -12, 18, -39}, {-50, 3, 18, 22, -15, -29, -6, 39, 26, -25, -6, -15, -23, -27, -19}, {-15, -20, 7, -42, -14, -50, -39, -17, -8, -50, -50, 3, -35, 19, 4}};
    r = matrix_lib::rank(left);
    ns = matrix_lib::nullspace(left);
    EXPECT_EQ(ns.columns(), left.columns() - r);
    EXPECT_EQ(matrix_lib::rank(ns), std::min(ns.rows(), ns.columns()));
    EXPECT_LT(sum(left * ns), precision);



    left = matrix_lib::Matrix{{7, 7, 32, -50, -9, 15, 36, 46}, {44, -43, 16, 50, 50, 26, -50, 3}, {37, -23, -25, 31, -12, -50, 46, -21}, {7, 36, -2, 15, 23, -50, 37, 19}, {-25, -47, -17, -20, 20, 4, 2, -26}, {5, -33, 28, -2, 14, -30, 10, 10}, {-8, 3, 45, -32, -6, 12, 50, -10}, {-48, 1, 32, 48, 24, -8, -35, -16}};
    r = matrix_lib::rank(left);
    ns = matrix_lib::nullspace(left);
    EXPECT_EQ(ns.columns(), left.columns() - r);
    EXPECT_EQ(matrix_lib::rank(ns), std::min(ns.rows(), ns.columns()));
    EXPECT_LT(sum(left * ns), precision);



    left = matrix_lib::Matrix{{42, 12, 10, -21, -8, -34, -3, -22, -17, -1, 1, 4, 7, 47, -23, 47, -2, 25, -34}, {36, -25, 9, -38, -11, -9, -50, -12, -30, -45, -43, 40, -32, -50, -29, -17, 34, -39, -45}, {27, 6, 27, -47, -25, 39, -22, -25, 13, 35, -44, -49, 8, 41, -25, 22, -27, 47, -8}, {5, 22, -24, 30, -42, 36, -4, 35, 48, 41, 45, 23, -45, -13, 26, 12, -47, -19, -9}, {-44, 42, -38, -39, -20, 23, -48, 4, 28, -30, -4, -24, 3, -20, -5, -45, -38, -17, 4}, {-26, -6, 9, 5, -15, -36, 42, 40, -38, 8, 36, -28, -31, 27, -9, 30, -32, -49, 17}, {11, 7, -3, -27, 5, 41, 40, -41, -18, -48, 36, -49, 19, -1, -32, -17, 8, -28, 47}, {38, 4, 18, 28, 17, -47, 46, 21, -21, 24, 4, -10, -48, -30, 3, 30, -24, -6, 39}, {-40, 6, 40, 14, 7, -15, 4, 10, -49, -9, 16, -21, -49, 43, -38, -49, 29, 14, -26}, {-43, -8, -1, -28, -50, -1, -50, 36, 46, -23, -30, -39, -18, -19, -26, -14, -14, 34, 7}, {-38, -26, 36, 16, 5, 42, 11, 41, 11, 47, -28, 26, -22, 40, 10, -2, 31, 20, -13}, {42, -41, -24, 12, 29, -13, 12, 25, 16, -17, -37, -18, 38, 39, -27, 50, 23, 30, 31}, {-24, 26, 31, -39, 36, 37, -7, 14, 22, -17, -30, 13, 8, 45, -33, 26, -19, -11, 6}, {-30, -44, 30, 44, -23, -45, -48, 5, 38, 24, -30, 7, 6, -11, -6, 20, 16, 20, 47}, {-23, 36, 27, -2, -18, -39, -27, -25, -2, -32, 6, 50, -29, -47, 43, -38, 5, 39, -7}, {-49, 24, 27, 14, -17, 13, -35, 11, 28, -22, -26, -32, -12, 48, 46, 12, -13, 34, -20}, {-34, -4, -19, 3, -3, -3, -20, -16, 0, -48, -27, -28, 28, -38, -40, 32, -1, 25, -25}, {21, 34, 4, -9, -12, 41, -37, 28, 18, -38, 24, -46, 9, 24, -39, 46, -50, 25, 32}, {9, 37, 32, -49, 50, -35, -41, 26, -38, 32, 14, 8, -44, -47, -30, 0, 1, -14, -50}};
    r = matrix_lib::rank(left);
    ns = matrix_lib::nullspace(left);
    EXPECT_EQ(ns.columns(), left.columns() - r);
    EXPECT_EQ(matrix_lib::rank(ns), std::min(ns.rows(), ns.columns()));
    EXPECT_LT(sum(left * ns), precision);
}

TEST(TestNull, horizontal) {
    matrix_lib::Matrix left, ns;
    size_t r;

    left = matrix_lib::Matrix{{41, -45, -37, 41, -9, -16, -41, -43, -19, 2, 4, -32}, {-35, -49, -3, 23, -7, 24, -23, 22, -42, -8, -39, 21}, {19, 11, -34, -15, -36, -12, -16, -40, -13, -22, 14, -32}, {14, -30, 7, 0, -11, -34, 35, 30, 48, 24, 42, 15}, {-5, 34, -11, -40, -38, 27, 26, -17, -32, -20, 14, 39}, {-15, -28, 5, 28, -3, -14, -36, 35, -32, -44, 26, 18}, {15, -2, 43, 49, -41, 28, 8, 32, 47, 21, 22, 17}};
    r = matrix_lib::rank(left);
    ns = matrix_lib::nullspace(left);
    EXPECT_EQ(ns.columns(), left.columns() - r);
    EXPECT_EQ(matrix_lib::rank(ns), std::min(ns.rows(), ns.columns()));
    EXPECT_LT(sum(left * ns), precision);



    left = matrix_lib::Matrix{{-24, 43, -35, -10, -7, -50, -21, -16, -8, 45, 11, -26, 1, 28, -17, 5, -22, -15, -25, 46, -11}, {46, -7, -20, 46, 46, -50, 40, -23, 43, -2, -33, 41, 13, -27, 7, -42, 45, 22, 14, 42, 23}, {3, 41, -48, 23, -12, 18, 42, 40, 37, 37, 40, -39, 18, -25, -10, -33, -31, -37, 6, 9, -47}, {-36, 37, -43, 45, 9, 12, 34, 4, -42, 50, -11, -7, 17, -37, 33, -13, -4, -40, -46, 5, 23}, {38, 42, -38, -12, 47, -25, 4, 43, 10, 9, 39, -17, 40, 1, -1, 18, 43, -22, 38, 50, 30}, {46, -34, -8, -31, -31, -23, -24, -35, 38, -19, 11, 48, -3, 46, -8, 41, 34, -49, 43, -8, -29}, {-33, 17, -31, 28, 29, -20, 22, -13, -20, 36, 17, -35, 41, -31, -34, 12, -50, 3, 13, -24, -26}, {22, -3, 22, -48, 20, 7, -47, -19, 27, 35, 22, 43, 9, -26, -1, 44, -33, 45, -43, 27, -37}, {-43, 25, 21, -7, -21, 17, 27, 16, -47, -2, 12, 19, -22, 29, -27, -48, 3, 25, -9, 48, -35}, {-32, 17, 36, 25, 1, 42, 46, 9, 36, 26, -40, -34, 44, 8, 11, 17, -4, 13, 15, 31, 1}, {-36, -46, 31, 25, 41, 30, 2, -14, 45, -32, -17, -9, -42, -15, 18, -20, -30, -36, -31, 27, -24}, {15, 36, -13, 13, 24, -47, -9, -6, -42, 12, 18, -38, -18, 20, 35, -5, -24, 4, -42, 17, 48}, {-15, -5, -41, 9, -33, -6, -27, 13, -34, -25, -3, -18, 7, -50, -26, 25, -49, 33, 30, 19, 38}, {6, 19, 7, -22, 42, -40, -38, 50, 34, 37, -20, 48, -8, -16, 3, 20, 11, -34, 17, 23, -38}, {-42, 34, 1, -38, -35, 46, -32, -22, 25, 43, 10, 43, 42, -37, -49, 49, -12, -29, 2, -46, -39}, {47, -2, -1, -3, -36, -25, -1, -24, -16, -6, 9, 34, -20, 29, -37, 20, -38, -37, -33, 27, 24}, {-41, 38, -25, 29, -38, 20, -22, 48, -5, -19, 6, -38, -33, 36, 31, -34, -12, -26, -36, 46, -12}};
    r = matrix_lib::rank(left);
    ns = matrix_lib::nullspace(left);
    EXPECT_EQ(ns.columns(), left.columns() - r);
    EXPECT_EQ(matrix_lib::rank(ns), std::min(ns.rows(), ns.columns()));
    EXPECT_LT(sum(left * ns), precision);



    left = matrix_lib::Matrix{{-28, -44, -15, -31, -16, 36, -29, 41, -39, 34, -24, 10, 1, 31, 5, 37, -22, -41, 44, 12}, {5, -38, -35, -15, -8, 4, 2, -18, -5, 39, 48, -32, -50, -16, -11, 43, 43, -47, 23, -42}, {-15, -30, 44, 13, -40, 1, -23, -34, -46, -7, 3, -44, -24, -22, -38, 14, -16, -48, 17, -43}, {14, 16, -40, -43, -30, 25, -12, -16, -15, 37, 49, -11, -28, 50, 18, -24, 3, 47, 40, -50}, {30, -44, 19, 37, -4, -24, 3, -11, 38, -45, 21, 22, 2, -23, 11, -3, 26, 32, 28, 16}, {-9, -41, -43, 14, 29, 10, 35, 46, 25, 16, 34, -39, 44, 32, -47, 47, -4, -30, 36, 17}, {-36, 10, 10, -2, 38, -23, -30, 24, -43, -23, -8, 38, 12, 13, 20, 10, 27, -31, -47, 36}, {-16, 44, 0, -31, 3, 9, -33, -29, 40, -5, 2, 11, 29, -5, 17, -48, -40, -18, -47, -11}, {5, 13, 36, -12, 35, 23, 45, -47, -25, -24, 17, 1, -5, -50, 24, 33, 27, -5, -40, -8}, {8, 45, -40, 23, 24, 47, 38, 31, -22, 3, -28, 9, -50, 10, 16, -24, 29, 49, -16, 32}, {33, -16, 44, 10, 29, -37, -35, -32, 35, -8, 40, 48, -22, 23, 31, -31, 14, 1, 1, 20}, {-9, 38, 6, -7, -41, 42, 33, 50, 33, -45, -42, 42, -8, 46, 28, 32, -28, -10, 4, 39}, {18, 18, 33, -16, 17, -2, -28, -15, 20, 41, -32, -10, -23, -43, 43, 47, 6, -38, -47, 32}, {7, -14, 18, 34, -20, -18, 16, 26, 47, 14, -46, 42, -42, -49, 20, -15, 15, -6, -19, 41}, {-18, -30, 43, -19, -31, 42, -12, -34, 48, -46, -41, -22, 9, -11, -13, 30, -41, -10, 39, -9}, {-48, 48, -48, -25, -4, 20, 11, -20, -29, 3, -7, -29, 31, 43, 14, -41, -31, -34, -2, 45}, {-48, 0, 4, -33, -30, 40, -24, -2, -32, -14, -27, -28, -50, 12, -19, 44, -7, -35, 41, -48}, {19, 4, -27, -25, -19, 45, -38, -47, -40, -1, 21, -29, 26, -36, 8, 22, 26, -49, -2, 9}};
    r = matrix_lib::rank(left);
    ns = matrix_lib::nullspace(left);
    EXPECT_EQ(ns.columns(), left.columns() - r);
    EXPECT_EQ(matrix_lib::rank(ns), std::min(ns.rows(), ns.columns()));
    EXPECT_LT(sum(left * ns), precision);



    left = matrix_lib::Matrix{{-44, -36, 4, 42, 35, 33, -31, -50, 7, -45, 50, -27, -36, -43, -5, 27, 44, 37, -45, 4}, {50, 8, -21, 20, -40, 18, 3, -41, -12, -23, -21, 38, -34, 39, 44, -34, -5, -22, 24, 13}, {44, -50, -19, 14, 28, 49, -33, -15, 42, 1, -2, -1, 44, 13, 21, -11, 24, 47, 31, -39}, {-13, -10, -4, 31, -16, 1, -20, -41, -26, 12, -5, 21, -26, 18, -11, -48, -17, -4, -20, -6}, {-30, -12, -11, -45, 0, 23, 6, -1, 1, 14, 23, -6, 26, -25, 0, -22, 1, -12, 13, 31}, {-36, 44, 40, 8, 7, 3, -40, 24, 33, 42, -5, -26, 50, -44, 2, -37, 27, 40, 10, 37}, {29, -40, -32, 23, -7, 26, -5, -46, 23, -4, 23, 8, -14, -39, 30, -4, -17, -31, 45, -6}, {7, -17, 0, 49, -43, 22, -14, -25, 33, 30, 28, 26, 7, 46, 2, 15, -30, -37, -23, -27}, {44, -40, 23, 15, 8, 8, 24, 20, -48, 4, -50, -10, 7, 31, -11, 39, 28, -34, -37, 20}, {15, 22, -21, -21, 38, -41, 17, -25, -45, -30, -10, 38, 38, -43, 33, 17, -4, 26, -17, 3}, {12, 36, -46, 48, -30, 39, -29, -49, 9, 44, -47, -47, -48, -31, -3, -21, 6, -27, -41, -5}, {-15, -49, -41, 12, -7, -31, -15, -30, -40, -1, -41, -18, -36, 0, 39, 41, -37, 32, 27, 25}, {10, -25, 12, -21, -9, 9, -33, 36, -27, 39, -50, -17, -19, 11, 41, 48, 6, -49, 37, 9}, {44, 28, -24, -19, 5, -7, 22, -2, -49, -19, 28, -48, 0, 9, 29, -1, -43, -15, -40, 0}, {-6, 15, -43, 50, -36, 13, 34, 22, -21, -40, -5, 33, -9, -29, 39, 9, -1, 18, -6, 6}};
    r = matrix_lib::rank(left);
    ns = matrix_lib::nullspace(left);
    EXPECT_EQ(ns.columns(), left.columns() - r);
    EXPECT_EQ(matrix_lib::rank(ns), std::min(ns.rows(), ns.columns()));
    EXPECT_LT(sum(left * ns), precision);



    left = matrix_lib::Matrix{{-24, 8, 27, 21, -46, -12, -21, -5, -49, -47, 40, 35, 43, 4, -12, 5, -48, 34, -18, 10, -45, -22}, {10, -34, 19, 36, 24, -9, -28, -33, -38, 23, -49, -18, -20, -4, 3, -31, -14, 23, 50, 22, -28, -38}, {47, 20, -36, 7, 37, -20, 50, 50, 2, -34, -48, -49, -40, 17, 14, 34, 23, -24, 27, 48, 4, 14}, {48, 6, -18, -9, -25, -45, -18, -25, 21, -25, 12, -49, 28, -43, -34, 10, 14, 19, 45, 17, 29, -19}, {28, -9, 33, 9, 21, -50, 27, 25, 20, -40, 28, 30, 7, 35, -23, -45, -7, -40, 0, 17, 35, -50}, {-44, -14, -21, -29, -11, 50, 32, -46, 8, -29, -48, -27, 2, 28, -1, -17, -1, -43, 43, -43, 37, 46}, {17, -37, 49, 21, -31, 6, 32, 42, -41, -11, 0, 23, -44, 35, -22, -36, -7, 48, -12, -13, 50, 34}, {-3, 18, 43, 3, -25, 1, 39, -11, -42, 24, -10, -30, 12, 23, 19, -31, 17, -37, -15, -16, -47, -39}, {-8, 37, 13, 18, -49, -5, 26, 28, -8, -18, -21, 5, -34, -8, -39, 1, 29, -29, -20, -26, -48, 46}, {-24, -18, -2, 45, -50, -13, -27, -41, 4, -46, -27, 24, 47, -10, -47, 34, -37, -38, 23, -47, -14, 4}, {34, 14, 22, -32, 30, 49, -26, 13, 35, -5, 12, -4, 3, -42, 12, -27, 2, -25, -32, -4, -19, -7}, {-6, -46, 45, -27, 22, -46, 11, -34, -21, -40, -23, 27, -47, 38, -6, 27, 46, 21, 7, -47, 6, 36}, {38, -48, -30, -37, 32, -41, -12, 11, -9, 18, -19, -7, -43, -8, -13, 16, 30, -5, 49, -39, -31, -32}, {21, 37, 37, -13, 43, 35, 7, -5, 29, -22, -10, -8, -46, 18, -42, -7, 42, 32, -39, -38, -12, -27}, {20, 2, 20, 23, 39, 4, -15, 48, 16, -24, 15, -8, -30, 34, -48, 37, -5, 20, 14, 48, -1, 40}, {-50, -17, -16, 50, 3, 6, 25, -5, -42, 25, 1, 42, -29, 11, 42, -1, -23, -37, -11, -13, 10, 41}, {-26, -45, 19, -11, -10, 29, -24, -23, 17, -30, -38, 15, 49, 29, 41, -25, -30, -2, -24, 17, -30, -16}, {25, 1, -21, 46, -4, 9, 43, 7, 38, 45, -11, 39, 33, 1, -40, 4, 39, -31, 30, 9, 44, -13}};
    r = matrix_lib::rank(left);
    ns = matrix_lib::nullspace(left);
    EXPECT_EQ(ns.columns(), left.columns() - r);
    EXPECT_EQ(matrix_lib::rank(ns), std::min(ns.rows(), ns.columns()));
    EXPECT_LT(sum(left * ns), precision);



    left = matrix_lib::Matrix{{1, 29, 31, 33, -44, -21, -11, 3, -14, -24, 18, -47, -50, 35, -27, 25, -48, 21}, {33, -15, -7, 17, 18, -49, 17, -47, 30, -3, -8, -25, 6, -21, 26, 13, 18, 11}, {41, 10, 41, 40, -3, 18, -18, 40, -25, 3, 40, -14, -34, 3, 43, 41, 32, 8}, {17, 34, -49, -1, 48, 14, 11, -19, 46, 5, -1, -36, 7, -38, 0, -35, 28, -50}, {11, 25, 49, -9, 39, -38, -12, -31, 11, 36, -46, -36, 41, 36, -45, -2, -39, -13}, {33, 50, -16, 9, -16, 18, 46, 0, 42, 21, -46, -28, 37, 11, 9, 4, -40, -42}, {33, -37, 41, -21, 17, 9, 43, 35, 4, 41, 12, 14, 19, -23, 29, 25, -32, 46}, {-6, 21, -26, 12, 8, 7, -18, -24, -44, 37, -27, -49, -46, 42, -33, 50, -26, 13}, {4, -30, 43, 38, -29, -45, 28, 28, 25, 22, 1, -25, -11, -42, -33, -40, -18, 30}, {19, -43, 8, -1, 49, 0, -7, -40, 45, -25, -16, -24, -18, -44, 40, -28, 34, -12}, {38, 15, -17, 18, -17, 27, -1, 42, 39, -30, -42, -5, 25, -32, 39, -5, -40, 48}, {-11, -19, -18, -30, 47, -12, 15, -37, 50, -2, 17, 39, -47, -30, -3, -25, -23, -22}, {43, 8, 26, -18, -26, 8, -30, 44, 9, 22, -40, -19, 39, -32, 34, 7, -30, 28}, {0, 46, -16, -30, -32, 28, 3, 11, 1, 34, -23, 47, -3, -15, 26, -10, 23, 37}, {23, 29, -23, -10, 32, -8, 3, 28, 13, 3, 39, 28, 35, 14, 9, -43, -12, 46}, {26, 12, -47, -32, -33, -14, -46, -36, 37, -11, -28, 28, 12, -37, -6, -27, 27, -10}};
    r = matrix_lib::rank(left);
    ns = matrix_lib::nullspace(left);
    EXPECT_EQ(ns.columns(), left.columns() - r);
    EXPECT_EQ(matrix_lib::rank(ns), std::min(ns.rows(), ns.columns()));
    EXPECT_LT(sum(left * ns), precision);



    left = matrix_lib::Matrix{{30, 39, 15, -18, 26, -35}, {-40, -27, -50, 18, -38, -47}};
    r = matrix_lib::rank(left);
    ns = matrix_lib::nullspace(left);
    EXPECT_EQ(ns.columns(), left.columns() - r);
    EXPECT_EQ(matrix_lib::rank(ns), std::min(ns.rows(), ns.columns()));
    EXPECT_LT(sum(left * ns), precision);



    left = matrix_lib::Matrix{{-31, 33, 43, 25, -21, -42, 31, 41, -43}, {-23, -13, 19, -33, 10, 43, 3, -26, 44}, {29, 20, -41, 48, -50, -13, -20, -20, -45}, {36, 50, 28, -28, -34, 35, -35, -48, 30}, {-26, 30, -30, -41, -7, 15, -26, 50, -49}};
    r = matrix_lib::rank(left);
    ns = matrix_lib::nullspace(left);
    EXPECT_EQ(ns.columns(), left.columns() - r);
    EXPECT_EQ(matrix_lib::rank(ns), std::min(ns.rows(), ns.columns()));
    EXPECT_LT(sum(left * ns), precision);



    left = matrix_lib::Matrix{{-3, 6, -50, 10, 34, 10, -18, -28, 0, 47, -1, 38, 5, 1, -2, 7, 19, 12, -33, 38, -41}, {8, -13, 17, -38, -49, -6, -4, 32, 31, 30, -3, 50, 21, 40, -4, 25, 44, 49, -35, -21, -10}, {41, 14, -49, 8, -11, -16, 46, -26, -22, -8, 44, 1, -44, -30, -39, -8, -28, -38, 33, -2, -38}, {34, 26, -8, 36, -7, -28, 44, -42, -43, 4, -44, -49, -41, -3, 3, -25, -49, -37, -45, -12, 42}, {39, -9, 50, 43, -11, 28, 5, -41, -27, 23, 50, 39, -29, 15, -26, -25, -34, 20, -1, 12, 17}, {29, -3, 35, 32, -27, 50, 23, -3, -45, 36, -19, 1, 37, 26, 8, 21, -49, -3, 33, 6, 18}, {-5, 6, 7, 44, -33, 9, -22, -3, 40, 25, -49, 22, -5, 1, 10, 21, -29, -42, -45, -47, 42}, {38, -30, -4, 18, 41, -36, 34, -16, 48, -20, 35, -45, -50, 31, -23, 10, 18, 24, 14, -19, -33}, {33, -45, -16, 42, -23, -32, -6, 37, -14, -26, -24, 48, 39, 14, 48, 49, -45, -27, -26, -36, 32}, {40, 43, -45, 13, 21, 27, 27, 41, -2, -32, -5, 49, -31, 35, 24, -29, -6, -6, 39, -22, -27}, {-20, -2, 11, -20, 21, -34, -45, -29, -37, 3, 40, 31, -15, -30, -34, 9, -45, 40, 40, 25, 27}, {5, 7, -1, -41, -22, 4, -8, -10, 11, 43, -37, -12, -20, -31, -2, -14, -30, -4, -11, -40, 45}, {-50, -31, -47, -3, -44, -40, -34, -35, 41, 47, 1, 36, 6, -49, 15, -17, -16, -20, -35, 35, 14}, {-10, -35, -35, 5, -47, 49, 8, 36, -27, 17, 18, -22, -32, -35, 3, -25, 50, 29, 23, -10, -33}, {-35, 1, -44, 28, 11, -49, 36, 19, -39, -33, -34, -37, -50, -47, -42, 1, 1, -38, -8, -35, -6}, {-25, -22, -22, -38, 25, -43, -14, 23, -44, 44, 46, -36, 43, -11, -22, -36, 36, -11, 50, -18, -9}, {-18, -18, -2, 10, -4, 21, 46, -39, 21, -27, -35, 43, -3, 4, -46, 47, -15, 48, 11, -21, -2}, {47, 29, -8, 37, 9, -12, -48, 38, -13, 45, -28, 7, 29, 12, -9, 44, 31, -24, -19, 23, -19}, {-7, -27, 46, -4, 15, -10, 49, 1, -15, 18, 37, -31, 9, 2, 32, -33, -31, -46, -4, -6, 50}};
    r = matrix_lib::rank(left);
    ns = matrix_lib::nullspace(left);
    EXPECT_EQ(ns.columns(), left.columns() - r);
    EXPECT_EQ(matrix_lib::rank(ns), std::min(ns.rows(), ns.columns()));
    EXPECT_LT(sum(left * ns), precision);



    left = matrix_lib::Matrix{{14, -5, 4, -31, 37, 30, -33, -22, 14, -29, -17, 3, 3, -1, -14, -4, 18, 37, -40, -38, 36, -6, 1, 11}, {25, -17, -20, -42, 2, -49, -28, -30, 4, -10, 12, 36, 44, -17, 40, 2, -17, 33, -30, 34, -49, 36, 48, 7}, {13, -32, -33, 2, 15, -4, -49, -16, -27, -7, 26, 14, 11, -14, -1, 1, -35, -47, -30, 31, 8, 17, -33, -16}, {-14, 37, -45, 40, 32, -46, -45, 48, -26, 34, 12, 19, -14, 40, -8, -48, -37, 24, 50, -3, -33, 38, -6, 10}, {49, 33, -18, 46, -24, 13, 42, 7, 10, -40, -20, -8, 47, -30, -30, -35, 36, -39, -28, -46, 40, -32, -16, -17}, {33, -29, 44, 21, -34, 32, 21, -13, -29, -23, 20, 4, -50, -42, -8, 19, -37, -43, 18, 14, 31, -23, -26, 22}, {-3, 7, -32, 3, 18, -9, 2, 40, -29, -18, -39, -22, -16, -46, 10, -33, 13, -36, -8, 28, -47, -7, -34, -9}, {45, 24, 20, 2, -37, -41, 39, 29, -28, -15, 10, -42, -9, -27, -47, -24, 8, 38, -8, -23, 11, -21, -8, 34}, {-25, 29, -28, -45, -37, -6, 39, -49, -24, -3, 34, 12, 23, 16, -1, -30, -16, 0, -40, -32, 27, -50, -24, -44}, {3, -17, -39, -32, 20, -45, 9, -26, 48, -28, 21, 24, -17, 49, 14, 48, 41, -26, 28, -17, 41, -47, 22, -45}, {-24, -5, 50, -19, -15, -12, 19, -48, 18, 45, 43, 23, 33, 43, 2, -22, -13, -26, 36, -8, 15, 43, 9, 0}, {44, -36, -43, -27, 4, 41, 44, -44, 27, 21, -7, -34, 22, -48, -44, 43, -18, 18, 23, 39, -43, 0, 3, 26}, {-38, 10, -4, -36, 37, -5, 27, -19, -16, 14, 19, -8, 26, 31, 20, -38, -37, 41, 42, 9, -16, -48, -46, 9}, {-45, 23, 28, -32, -7, -19, 6, -42, -16, 29, 14, 21, 43, -9, -2, 6, -18, 10, -43, -46, -49, -1, -18, 48}, {45, 26, 21, -48, 2, -31, 20, 33, 42, -41, 48, 20, -12, 5, -16, -13, 28, -46, 3, 19, 10, -41, -34, 38}, {-25, 14, 39, -11, 28, -3, -30, 8, 20, -17, 12, 8, -34, -28, 34, 40, -27, 29, 4, -11, 35, 14, -27, 45}, {-37, 45, -1, -10, -45, 18, 2, -10, -43, -31, -16, 33, 19, -50, -9, 15, 17, 12, -9, 23, -27, 5, -22, 1}, {-18, -32, -49, 35, -43, 19, 5, -43, -19, 10, -2, 34, 35, -31, 13, -48, -11, -19, -48, -6, -23, -8, 20, -44}, {48, 38, 5, 5, 2, 39, 19, 21, 38, 17, -46, 19, 37, -21, 18, -23, 25, -46, 32, 16, 2, -15, -11, -18}};
    r = matrix_lib::rank(left);
    ns = matrix_lib::nullspace(left);
    EXPECT_EQ(ns.columns(), left.columns() - r);
    EXPECT_EQ(matrix_lib::rank(ns), std::min(ns.rows(), ns.columns()));
    EXPECT_LT(sum(left * ns), precision);



    left = matrix_lib::Matrix{{-6, 38, -49, 43, 6, -26, 32, 18, 4, 18, 38, -17, -49, 5, 34, -20, 37, -15, -32, -30, -28}, {28, 37, -18, -49, -43, 0, 31, -9, 8, 18, 25, -2, -25, -33, -5, -46, -35, 27, -30, -27, -36}, {-2, 26, 42, -30, 23, 9, 39, 13, 24, 19, 22, -50, 9, 0, 24, 32, -50, 3, -37, -39, -2}, {-8, 35, -36, 39, 48, -37, -22, -48, 11, 45, 38, -16, 44, -34, -37, -49, -25, -6, 8, -10, -42}, {23, -29, -35, 44, 27, 49, 35, -39, 44, -26, -20, -48, 13, -25, 22, 22, -11, -41, 12, 29, -19}, {20, -2, -38, 29, -34, -10, -38, -17, 5, 46, -24, 12, -17, -50, -24, -36, -44, 15, 21, 43, -21}, {46, -45, -24, -4, 24, -50, -37, -9, -27, -48, 43, -20, 23, -12, 50, -30, -37, 39, -49, 8, -35}, {-26, -45, -38, -30, -46, -28, -21, 16, -30, -47, -13, -29, 35, 4, 27, -24, -20, 24, 40, 22, -9}, {-26, 49, 47, -48, 3, -3, -29, -4, 44, -6, 32, -34, -44, 48, -3, -34, -39, 11, -23, -12, 15}, {16, -21, 28, 41, 35, 35, -10, -4, 21, 10, 30, 50, -35, -21, 27, -5, -9, -50, -19, 21, 18}, {15, 31, 14, -47, -16, 44, -41, 11, 36, -20, -27, -40, 4, 36, -18, -32, 8, -48, 14, -17, 24}, {19, -7, 4, 1, 46, 1, 39, -18, 13, -33, -7, 31, -43, -12, -39, -9, 42, 1, 36, -9, 16}, {6, 37, 13, -49, -6, 30, -41, 30, 40, -4, -26, 11, -4, 35, 47, 34, 27, -18, 43, 32, -30}, {27, 0, 23, -24, 24, 32, -41, 45, 20, -16, -32, 2, -35, 24, 46, 4, 37, -40, -29, -42, 49}, {-2, 20, 32, -46, -27, 10, 46, 41, 7, 18, -30, -5, -50, -36, 31, 20, 37, -28, 14, -27, 29}, {-28, 35, 20, 35, -45, -15, -37, 50, -11, 14, 29, -36, 0, -19, 6, 32, 35, 2, 33, -47, 23}, {-22, 47, 29, 0, -37, -28, 21, -34, 25, -19, -1, 15, -3, 23, 46, 18, -4, 37, 20, -13, 34}};
    r = matrix_lib::rank(left);
    ns = matrix_lib::nullspace(left);
    EXPECT_EQ(ns.columns(), left.columns() - r);
    EXPECT_EQ(matrix_lib::rank(ns), std::min(ns.rows(), ns.columns()));
    EXPECT_LT(sum(left * ns), precision);



    left = matrix_lib::Matrix{{-26, 37, -3, 32, 2, 31, -37, 20, -8, -29, -11, 26, 29, 28, 21, -35, -48, -28, -10, -3, -17}, {14, -35, 39, 39, 37, 39, -14, 6, -29, -36, 41, 50, 47, 38, -24, 0, 13, 49, -23, 21, 35}, {47, -17, 20, -2, -12, 45, 41, 44, 36, 47, -50, -38, 20, 3, 12, 38, -2, -47, 11, 46, 46}, {-33, 30, 20, -41, 42, 18, -20, -37, -2, 7, 44, -3, -9, 21, -50, -38, 23, -3, -47, 1, -27}, {-30, 39, -14, -32, 30, -25, 3, -9, -13, 41, -42, -32, 10, -44, 30, 8, 45, -13, 7, 14, -45}, {-29, -17, -1, 27, -17, 6, -6, 22, -42, -5, -50, -12, -24, -8, -26, 12, 10, 3, 21, -43, -17}, {-8, 20, 13, -30, -29, -7, 28, 33, -40, 7, 41, -11, -13, 33, -49, -37, -22, -35, 50, 22, 7}, {-41, -35, 1, -35, -46, -15, 6, -39, 6, -45, -33, 0, -26, -2, -15, -9, -5, -22, 14, 2, -39}, {18, -6, 11, -5, 28, -50, -13, 47, -7, 0, -20, 2, 49, -4, 14, -5, 24, 33, 3, -10, 1}, {-37, 22, 5, -12, 9, 18, -8, -2, -16, 3, 2, 33, -16, 11, -22, -3, 28, -47, -13, -35, 20}, {-7, -7, -10, -22, 2, -35, -40, 7, -27, -42, 6, -50, 47, -6, 21, 32, 26, 9, -30, -32, 38}, {-34, -16, 23, -41, 41, -3, 39, -41, -15, 13, 16, -18, 23, -28, 10, -40, 5, 34, -39, 38, 27}, {49, -32, 27, 48, 18, -38, -4, -35, -43, 48, -26, -26, 7, -29, -47, -2, -43, -22, 39, -16, 16}, {-36, 29, 3, 0, 50, 24, 4, 19, -50, 36, 30, 32, -34, 40, -39, 26, -34, 0, -18, 36, 41}, {39, 46, -21, 40, -27, -3, 26, -39, 30, 10, -35, 32, -6, 21, 17, -25, -46, 34, 44, 36, 8}, {-30, -46, 5, -3, 41, -9, 46, 42, 30, -37, -17, -2, -36, 50, -49, 6, 44, 20, 29, 5, 27}, {45, -50, -29, -27, 23, -1, -38, -35, 13, -14, 46, -38, -22, -24, 47, 14, 28, -36, 50, -45, 22}};
    r = matrix_lib::rank(left);
    ns = matrix_lib::nullspace(left);
    EXPECT_EQ(ns.columns(), left.columns() - r);
    EXPECT_EQ(matrix_lib::rank(ns), std::min(ns.rows(), ns.columns()));
    EXPECT_LT(sum(left * ns), precision);



    left = matrix_lib::Matrix{{-37, -3, 34, -40, 11, 32, -24, -33, -25, 45, -25, 4, 36, -11, 2, 13, 19, 7, 8}, {-43, -9, 20, 16, 4, 41, 21, 14, -11, -13, 34, 22, 18, -5, -49, -36, -7, 47, -40}, {12, 18, -7, 43, 38, -13, 24, -5, 1, 33, -26, -4, 47, -42, -35, -28, -1, -43, 41}, {-43, 49, -45, -38, 46, -41, -4, 41, 42, -5, 1, 12, -11, -19, -50, -1, 5, -4, -9}, {-28, 44, 10, -32, -20, -24, 20, 36, -36, 41, -24, 25, 20, 45, -44, -27, -6, 35, -30}, {-23, 31, -21, 37, 13, -39, 33, 32, 38, 33, -4, 28, 46, 47, 49, 21, 19, 34, -26}, {37, -6, -21, -33, -49, 48, -36, -24, 37, 42, 21, 50, -48, 12, 22, -43, 5, -43, -39}, {16, -36, 24, 8, 33, -21, 45, 46, 37, -45, -49, -7, -36, -14, -34, 26, 23, 2, 21}, {19, 46, 22, 10, -33, 13, 48, -35, -3, -8, 6, 2, -23, 28, 7, 37, -3, 24, -17}, {-32, -50, -45, 18, -40, 5, -18, 35, 41, -34, -5, -37, -33, -33, 37, 33, 35, -6, -41}, {-8, -36, -18, -3, -16, 50, 37, -15, -36, -6, 50, -26, 7, 10, 45, -15, 30, -17, -10}, {-41, 5, 19, 46, 5, 15, -47, 13, -16, -36, 50, -23, 12, -46, 34, -4, 31, 15, -44}, {5, -22, 32, -10, -5, 25, 25, 33, -38, 38, 17, -19, -34, 34, -8, -29, 42, 4, -37}, {26, 25, -16, 0, -4, 4, -24, 40, -21, 31, 26, -41, 14, -39, 9, -20, 42, -24, 25}, {-27, -10, -44, -21, 36, 24, -25, 20, -10, 12, 11, 15, 16, -46, 17, -1, -13, 46, -28}};
    r = matrix_lib::rank(left);
    ns = matrix_lib::nullspace(left);
    EXPECT_EQ(ns.columns(), left.columns() - r);
    EXPECT_EQ(matrix_lib::rank(ns), std::min(ns.rows(), ns.columns()));
    EXPECT_LT(sum(left * ns), precision);



    left = matrix_lib::Matrix{{-25, 3, 1, -45, -12, -13, 23, 34, 13, -15, -43, 30, -6, 15, -16, 36}, {-39, -40, -20, -12, 30, 37, 5, -18, 3, 6, -20, -48, -4, -48, -5, -5}, {37, -30, -33, -43, -18, 28, -32, -42, 1, 20, 16, -33, 14, 41, 26, -49}, {-22, 1, 2, 23, -35, 15, -38, -35, -26, 14, -8, 8, -31, -5, -28, 43}, {-38, -38, 6, -32, 19, 3, -15, 17, -21, -23, -7, 31, -18, 40, 49, 28}, {-7, 26, -2, -40, -49, -6, 36, -27, 18, 25, 6, -35, -41, -49, -12, -50}, {2, -3, 41, 14, 16, 1, 35, 0, -9, 16, -20, -34, -47, -20, -14, -35}, {43, -41, 6, 22, -35, 48, -4, -5, -24, 27, 41, -18, 9, -48, 33, 45}, {-9, 16, -36, 43, 1, 40, -4, 24, -24, -21, -42, 40, 29, 41, -32, 14}, {-43, 4, -6, 27, -5, 43, 3, -40, -46, 41, 26, -7, -47, 5, -4, -7}, {-10, -13, 17, -36, 12, -42, -27, 6, 15, -29, -33, -4, 36, 7, 12, -10}};
    r = matrix_lib::rank(left);
    ns = matrix_lib::nullspace(left);
    EXPECT_EQ(ns.columns(), left.columns() - r);
    EXPECT_EQ(matrix_lib::rank(ns), std::min(ns.rows(), ns.columns()));
    EXPECT_LT(sum(left * ns), precision);



    left = matrix_lib::Matrix{{-20, -39, 43, -15, 18, -25, -23, 28, -26, -2, -39, -49, 10, 12, -25, -28, -4, -8, 32}, {34, -48, -47, 46, -4, -47, 34, 41, 40, -34, 26, 39, -9, -43, -32, -2, -26, -50, -27}, {2, 23, -9, 22, -10, 5, -17, 44, -50, 14, -23, 20, -18, 36, 26, -39, -36, 16, 26}, {49, -6, 31, 20, 28, 23, -7, -6, 34, 29, -39, -25, 49, -26, -50, 20, -10, -23, -29}, {7, 42, 32, -16, 2, -10, -15, 22, 50, -36, 14, 39, 14, 46, -29, 13, 42, -2, 7}, {-33, 36, -27, 4, 7, 27, 40, 43, 4, 40, 4, 0, 2, 47, -50, 28, 17, 8, -26}, {12, -43, -39, 13, 1, -43, 5, 36, 21, 48, -1, 48, 17, 2, 41, 20, 46, 10, -37}, {28, -29, -42, -43, 35, -19, -23, -33, -33, 49, 12, -11, -22, -48, 39, 47, -16, -19, 41}, {-25, -23, -37, -8, -30, -26, -41, 26, -3, 43, -48, -46, -9, 33, -34, -43, 19, 44, 16}, {-30, -7, 0, 4, 50, -36, -5, -18, -5, 11, -41, 47, -24, 42, -38, 21, 1, -40, -24}, {43, 18, -25, -43, 50, 41, -46, 18, 15, 42, 30, -3, -36, -40, 40, 50, -17, -17, -4}, {-26, -1, 2, 42, 18, -15, 3, -1, -44, -3, -38, -32, 31, -20, 9, 36, 42, -32, 6}, {-45, 36, -19, 10, -32, 2, 30, -45, 34, 19, 19, 45, -39, 41, 24, -45, 2, 40, 7}, {-44, -3, -22, 13, -22, -25, -36, 8, -46, 38, -8, -39, 27, -14, 35, 24, 50, -10, 12}, {32, 19, 32, -9, 10, 25, 3, 11, -4, 2, 39, 42, -13, 46, 8, 37, 20, -40, 17}, {-18, -25, -42, 38, -42, -48, -18, -37, 20, 44, -19, 4, -47, 48, 40, 35, 31, 26, -38}, {-36, -14, 28, -46, -17, 14, 39, -23, 47, -14, -17, 34, 2, -23, 29, -16, 45, 33, -37}};
    r = matrix_lib::rank(left);
    ns = matrix_lib::nullspace(left);
    EXPECT_EQ(ns.columns(), left.columns() - r);
    EXPECT_EQ(matrix_lib::rank(ns), std::min(ns.rows(), ns.columns()));
    EXPECT_LT(sum(left * ns), precision);



    left = matrix_lib::Matrix{{9, -23, -29, 41, 25, -31, 20, -46, -46, -16, 25}, {-24, -15, -50, -6, -38, -20, 39, -11, -25, 11, 21}, {14, 36, -46, 25, 12, 45, 32, -2, 44, 40, -50}, {10, 28, 2, 39, -8, 7, 39, -45, 1, 34, 10}, {4, -7, 33, -4, -47, -8, 21, 19, -32, 48, 21}, {-35, -18, 5, 5, -1, 3, 25, -6, 37, -45, 30}, {4, 29, -43, 35, 12, -5, 1, -15, -21, -8, 48}, {4, 15, -47, 25, 44, -4, 39, -16, -22, 5, 29}, {27, -21, -41, -19, 12, -41, 22, 49, 7, 18, -6}};
    r = matrix_lib::rank(left);
    ns = matrix_lib::nullspace(left);
    EXPECT_EQ(ns.columns(), left.columns() - r);
    EXPECT_EQ(matrix_lib::rank(ns), std::min(ns.rows(), ns.columns()));
    EXPECT_LT(sum(left * ns), precision);



    left = matrix_lib::Matrix{{-18, 36, 4, -12, 18, -22, 42, -8, -46}, {29, -21, -43, 40, -3, -11, -40, -20, 38}, {38, 33, -35, -19, -44, -21, 4, -27, 1}, {-13, -23, -36, -12, -38, 5, 29, -22, -17}};
    r = matrix_lib::rank(left);
    ns = matrix_lib::nullspace(left);
    EXPECT_EQ(ns.columns(), left.columns() - r);
    EXPECT_EQ(matrix_lib::rank(ns), std::min(ns.rows(), ns.columns()));
    EXPECT_LT(sum(left * ns), precision);



    left = matrix_lib::Matrix{{-17, -31, 29, 44, 34}, {44, 33, -11, 30, 33}, {-47, 45, 19, -33, 10}};
    r = matrix_lib::rank(left);
    ns = matrix_lib::nullspace(left);
    EXPECT_EQ(ns.columns(), left.columns() - r);
    EXPECT_EQ(matrix_lib::rank(ns), std::min(ns.rows(), ns.columns()));
    EXPECT_LT(sum(left * ns), precision);



    left = matrix_lib::Matrix{{-39, -34, 28, -1, -45, 0, 43, -35, -2, 30, 29, 23, -39, -10, 15, -4, 8, -25, 48, -29, -17, 27}, {-4, 48, -40, -12, 25, -49, 1, -50, -17, 12, -36, 12, 36, -46, 1, 49, -45, -41, 43, 26, 49, 44}, {42, 13, -29, -16, -21, -45, -30, 25, 16, -32, -24, 20, 32, -18, 27, -13, -46, 28, -3, 20, 13, 2}, {27, 41, -6, 14, -1, -22, 0, 49, 46, 44, -27, -32, -3, 36, 27, 28, 45, -13, 45, 7, -19, 14}, {38, 47, -11, 39, 30, 38, -10, -49, -16, -17, 33, -9, 36, -16, 37, 48, -31, 36, -11, -12, 21, -6}, {-8, -24, -37, -13, -33, -24, 14, -11, 36, 6, -34, -41, 45, -32, 24, -23, 34, -37, -23, -28, -10, -7}, {-46, 26, 17, -33, 34, -16, 19, -40, -48, 14, -46, -37, -48, -8, 11, 9, -3, -37, 37, -31, -45, -17}, {-3, 18, 23, -49, 4, 23, 45, 4, 45, 6, -13, 19, -48, 26, 17, -4, 21, -47, -14, 45, -6, 43}, {-31, 37, 12, -27, 11, -15, 35, 24, -27, -42, -31, -47, -22, -41, 26, 32, -34, -45, 43, -20, 36, 35}, {0, -21, 32, 10, -46, 24, -45, -1, 29, -35, 13, 8, 11, -40, 37, -15, -33, 2, -31, 33, 13, 8}, {36, 14, -29, -11, 7, -44, -16, -5, 12, -20, 19, 6, 27, -19, -49, 23, 5, 12, -45, -18, 28, -29}, {-36, -41, -25, -14, -12, 13, -13, -4, -50, 26, -27, 11, 17, 31, 20, 21, 34, 20, -27, -8, 31, 35}, {33, 13, -17, 31, 22, -28, -8, 47, -31, 0, 5, -49, -2, 10, 41, -41, -35, 43, 40, -5, 36, 43}, {-19, 21, 30, -5, -20, -4, 50, 18, 1, 50, 21, -23, -22, -30, 27, 31, 28, 19, -26, -38, -24, 18}, {-48, -49, 30, 23, 4, 50, 26, 17, 38, -39, -23, 0, -7, -15, -46, -23, 9, -33, -6, 30, 30, 31}, {25, -42, 44, 18, 31, -22, 8, -46, -34, 33, -4, -49, -18, -4, -5, -21, -39, 46, -1, -31, -43, 3}, {-16, -27, -19, 39, -21, -37, 41, -24, 50, -46, -49, 23, -38, -10, 40, 5, -42, 48, -16, -35, -41, -48}};
    r = matrix_lib::rank(left);
    ns = matrix_lib::nullspace(left);
    EXPECT_EQ(ns.columns(), left.columns() - r);
    EXPECT_EQ(matrix_lib::rank(ns), std::min(ns.rows(), ns.columns()));
    EXPECT_LT(sum(left * ns), precision);



    left = matrix_lib::Matrix{{9, -41, 0, -19, -4, 28, 10, -42, -28, -1, -27, 12, 44}, {0, -21, 36, 17, 20, 1, -40, 6, -48, -41, -40, 29, -48}, {30, 14, -6, -48, 33, 5, -49, -6, 37, -37, -5, 9, -9}, {-37, -4, 28, -39, -15, -18, -23, 20, -19, -28, 24, 47, 29}, {39, -25, -8, -40, 4, 48, 36, 15, 44, 9, -9, 33, -43}, {-39, -35, -50, -10, -50, 32, -14, -3, 10, -49, -44, -19, 29}, {-40, -45, -17, 47, -44, 16, 22, -27, 20, 9, 47, 2, 27}, {17, 47, 12, 24, 39, 29, -3, 49, -24, -39, -23, -1, 14}, {-14, -13, -30, -40, 50, -32, 11, -45, 36, -26, 34, 8, -47}};
    r = matrix_lib::rank(left);
    ns = matrix_lib::nullspace(left);
    EXPECT_EQ(ns.columns(), left.columns() - r);
    EXPECT_EQ(matrix_lib::rank(ns), std::min(ns.rows(), ns.columns()));
    EXPECT_LT(sum(left * ns), precision);
}

TEST(TestNull, vertical) {
    matrix_lib::Matrix left, ns;
    size_t r;

    left = matrix_lib::Matrix{{-16, -6}, {28, -9}, {-17, 27}, {-44, 12}, {-37, -13}, {47, 30}, {26, 41}};
    r = matrix_lib::rank(left);
    ns = matrix_lib::nullspace(left);
    EXPECT_EQ(ns.columns(), left.columns() - r);
    EXPECT_EQ(matrix_lib::rank(ns), std::min(ns.rows(), ns.columns()));
    EXPECT_LT(sum(left * ns), precision);



    left = matrix_lib::Matrix{{-37, -6, 3, -34}, {5, 50, 43, -22}, {-36, 14, -46, 24}, {29, -25, 3, 26}, {-32, 15, 4, 49}, {30, -47, -32, 5}, {-12, 37, -2, 47}, {28, 29, 49, -35}};
    r = matrix_lib::rank(left);
    ns = matrix_lib::nullspace(left);
    EXPECT_EQ(ns.columns(), left.columns() - r);
    EXPECT_EQ(matrix_lib::rank(ns), std::min(ns.rows(), ns.columns()));
    EXPECT_LT(sum(left * ns), precision);



    left = matrix_lib::Matrix{{9, -20, -23}, {27, 1, -18}, {12, 12, -16}, {-31, -15, 23}, {-23, 19, 21}, {10, -42, 37}, {37, 18, -37}, {31, -30, 5}};
    r = matrix_lib::rank(left);
    ns = matrix_lib::nullspace(left);
    EXPECT_EQ(ns.columns(), left.columns() - r);
    EXPECT_EQ(matrix_lib::rank(ns), std::min(ns.rows(), ns.columns()));
    EXPECT_LT(sum(left * ns), precision);



    left = matrix_lib::Matrix{{30, -46, 18, -34, -1, 19, 49, 19, 32, -47, -11, -30, -17, -34, 7, -39, -37, 34}, {24, -25, -23, -9, -7, 49, -9, -1, -14, 18, 16, -16, -11, 17, 48, -41, 44, 28}, {0, -17, 12, -36, 11, 12, 31, -29, 28, -23, 33, -2, -46, -30, 50, -19, 0, -30}, {-11, 33, -43, 38, -1, 32, 30, 40, -8, 19, -21, 11, 25, 19, -8, -40, 13, 14}, {-47, 50, -31, 16, 10, 13, -18, -45, -48, 21, -45, -17, -24, -20, -41, -28, 13, 50}, {40, -7, 45, 49, 36, 44, -43, 6, -6, 7, 7, 41, 41, 21, -1, -48, 24, 5}, {-18, 20, 26, 46, 31, 8, -46, -3, 9, 47, 43, 9, 37, -6, -40, 42, 43, 43}, {-23, 43, 18, 10, 26, 40, 21, 14, 31, -39, 47, 44, 15, 38, -16, -47, 38, 11}, {41, 14, 8, 23, -27, 32, -26, -22, -13, -29, -48, -33, 16, -20, 7, -6, -6, 49}, {23, -36, -20, 33, -23, -36, -18, -42, 40, -23, 40, -15, -25, 41, -42, -48, -44, -4}, {-31, -14, -32, 40, 17, -20, -17, 45, -29, 11, 9, 1, 17, -40, 35, -18, -42, -22}, {48, -27, -29, 34, -25, 45, -12, -49, -41, 8, -16, 49, -45, 7, 50, 7, -3, -34}, {49, 2, 18, -24, 20, -47, -6, 6, -24, 28, -7, 4, -39, -21, 36, -26, 41, 33}, {43, 10, -40, 34, -20, -35, 7, -5, 31, 31, 15, 10, -38, -50, -24, -21, 10, 30}, {49, -4, 40, 43, 18, 2, 41, 10, -34, -40, -25, -1, 14, -40, -36, 48, 32, -33}, {-30, -49, -41, -21, -30, -11, -32, 20, -31, 2, 12, -6, -45, 17, 29, 40, 18, 24}, {9, 17, 30, -23, 12, 5, -27, 24, 6, -50, 15, 21, 6, -5, 40, 45, 28, 35}, {-45, -42, 3, 11, 0, -25, 47, -33, 12, 27, -40, -34, -29, 48, 14, -37, 46, 26}, {-46, -45, 17, 5, -9, 30, -22, -29, -24, -15, 5, 46, 14, 22, 3, 39, -10, -22}, {-23, -30, 43, -19, 50, 31, -3, 23, -12, 48, -36, -6, -50, 1, 35, -34, 37, -34}};
    r = matrix_lib::rank(left);
    ns = matrix_lib::nullspace(left);
    EXPECT_EQ(ns.columns(), left.columns() - r);
    EXPECT_EQ(matrix_lib::rank(ns), std::min(ns.rows(), ns.columns()));
    EXPECT_LT(sum(left * ns), precision);



    left = matrix_lib::Matrix{{38, -30, 36, 50, -16, 1, -22, -13, 16, 45, -5, -12, -43}, {34, 10, 20, -44, -24, 7, 29, -32, 32, -36, -39, -2, -1}, {-37, -8, -32, 1, -9, 24, 33, 12, 15, -40, -49, 4, 44}, {41, 40, 26, 4, -35, 40, 14, -49, 12, -7, 46, 28, -28}, {-1, 47, -22, 18, -21, 39, 24, 9, -16, -20, -5, 16, -34}, {-50, -14, -1, 25, 38, -2, 43, -11, -48, -12, -17, -10, 2}, {-8, 16, -21, -14, 17, 7, 11, 33, 45, 4, 50, 36, 46}, {-3, -49, -14, 28, -43, 35, -49, -27, 21, 39, 18, -21, 35}, {-34, 7, -39, -7, 6, 7, -6, -20, 47, 38, 12, -21, 11}, {-48, 46, -23, 50, 35, -29, -20, 49, 48, -36, -42, 22, -23}, {12, 1, 42, 12, -6, -38, 47, -41, -14, 28, -35, 24, 12}, {-5, -33, 36, -26, -13, -45, -41, -30, -20, 20, 35, 49, 42}, {-39, -21, 18, -13, 35, -7, -1, 44, 8, -5, 43, -35, -40}, {-35, 15, 40, 24, -10, 19, -38, 5, -12, -9, -16, -23, -7}, {-3, 28, -13, 23, 32, -17, -45, -38, -44, 25, -17, -35, -16}, {-30, -15, 44, -40, 16, 38, 29, -45, 35, -15, -45, 40, 33}};
    r = matrix_lib::rank(left);
    ns = matrix_lib::nullspace(left);
    EXPECT_EQ(ns.columns(), left.columns() - r);
    EXPECT_EQ(matrix_lib::rank(ns), std::min(ns.rows(), ns.columns()));
    EXPECT_LT(sum(left * ns), precision);



    left = matrix_lib::Matrix{{-4, -48, -37, -29, -7}, {-40, -25, -14, -20, 15}, {21, -8, 44, -48, -38}, {31, 14, -31, -40, -34}, {-20, 8, 24, 39, 46}, {-35, 16, -12, 40, -28}, {-50, 26, 2, -20, -1}, {23, 32, -2, -39, -45}, {-50, -4, -20, 18, 27}};
    r = matrix_lib::rank(left);
    ns = matrix_lib::nullspace(left);
    EXPECT_EQ(ns.columns(), left.columns() - r);
    EXPECT_EQ(matrix_lib::rank(ns), std::min(ns.rows(), ns.columns()));
    EXPECT_LT(sum(left * ns), precision);



    left = matrix_lib::Matrix{{42, 15, -31, 36, 43, -39, 15, 24, 43, 12, -47}, {-22, 24, 42, -6, -44, -45, 14, -22, 12, 47, -48}, {28, 39, -32, 26, -50, 40, -1, -1, -20, -47, 36}, {-7, 4, 17, -11, -14, -22, 10, 14, -31, -46, -4}, {41, 34, -12, -21, -1, 18, 41, -45, 44, -38, 13}, {25, 42, 1, -45, -25, -30, -33, -28, 14, 0, -43}, {-19, -13, -23, 18, -14, -20, -44, -32, -8, 46, -17}, {36, 41, -26, 32, 6, -9, 47, -19, -25, 25, 6}, {-37, 13, 24, -23, -14, -3, -38, -23, -1, 39, -32}, {26, 6, -29, -30, 14, 34, 0, -27, 27, 46, 23}, {-42, 47, 21, 24, -42, -22, 7, 26, -30, -23, -40}, {-46, 37, -27, -9, 8, 20, -6, 10, -31, -23, 49}, {14, 11, -33, 11, 45, -35, 14, 38, 46, 0, -47}, {-17, -38, 17, 2, -13, 49, 6, -24, 30, 21, -23}};
    r = matrix_lib::rank(left);
    ns = matrix_lib::nullspace(left);
    EXPECT_EQ(ns.columns(), left.columns() - r);
    EXPECT_EQ(matrix_lib::rank(ns), std::min(ns.rows(), ns.columns()));
    EXPECT_LT(sum(left * ns), precision);



    left = matrix_lib::Matrix{{-39, 46, 43, 13, 36, 11, -36, -27, -3, -17, 28, -5, 22}, {9, 36, 16, 35, 23, 30, 40, 6, -26, -4, 21, -9, 21}, {-9, 29, 36, -34, -22, -42, 8, -4, 30, 30, 16, -21, 44}, {-3, 13, -7, 38, -23, -31, -19, 36, 8, 9, 40, 5, 37}, {47, -41, 18, 26, 27, 8, -50, -6, 29, 47, 40, 15, -27}, {20, 41, -48, 8, 47, 9, -30, 1, 25, -40, -36, -41, 5}, {-43, 19, 31, 19, -16, 8, -14, -1, -49, 34, 9, -2, 45}, {50, 50, -41, 41, 41, 0, 20, -29, -48, 35, 23, -48, 6}, {24, 7, -24, -39, 42, 33, -7, 9, 48, -16, -13, 30, -50}, {-46, 32, 11, 46, -47, 29, -1, -35, 15, -27, 9, -26, 6}, {35, 11, -15, 26, 15, 6, 30, -1, -32, 30, -23, 35, -18}, {-41, -49, 42, -31, -44, 45, 21, 7, 27, -10, 12, -26, -12}, {-35, -3, -11, 15, -13, -49, 45, -10, -6, -9, 6, 13, 50}, {38, 39, 21, 34, 23, -15, -28, 34, 48, -39, -13, 25, -27}, {4, -29, 32, -1, -7, 10, 36, -15, 24, -29, -28, -27, -13}, {33, 17, -8, -44, -19, -18, 24, -8, 19, 26, -32, -20, -43}};
    r = matrix_lib::rank(left);
    ns = matrix_lib::nullspace(left);
    EXPECT_EQ(ns.columns(), left.columns() - r);
    EXPECT_EQ(matrix_lib::rank(ns), std::min(ns.rows(), ns.columns()));
    EXPECT_LT(sum(left * ns), precision);



    left = matrix_lib::Matrix{{-10, 41, 42, 29, -48}, {-43, 6, 7, 20, 1}, {-41, 13, 18, 50, -34}, {-38, 43, -42, 38, -2}, {-49, 3, 31, -20, 16}, {16, -48, -19, 25, -20}, {-41, -24, -34, -50, -50}, {3, -6, -42, -38, 29}, {0, 6, 38, 4, 36}, {-33, -39, 21, -21, 48}};
    r = matrix_lib::rank(left);
    ns = matrix_lib::nullspace(left);
    EXPECT_EQ(ns.columns(), left.columns() - r);
    EXPECT_EQ(matrix_lib::rank(ns), std::min(ns.rows(), ns.columns()));
    EXPECT_LT(sum(left * ns), precision);



    left = matrix_lib::Matrix{{24, 36, 49, 21}, {42, 25, 2, -32}, {-29, 12, -42, 16}, {-39, -48, 13, -18}, {31, 27, -49, -49}, {-5, -14, -4, -8}, {-44, 50, -11, 18}, {-25, -2, 36, 38}, {-6, 2, -6, 12}};
    r = matrix_lib::rank(left);
    ns = matrix_lib::nullspace(left);
    EXPECT_EQ(ns.columns(), left.columns() - r);
    EXPECT_EQ(matrix_lib::rank(ns), std::min(ns.rows(), ns.columns()));
    EXPECT_LT(sum(left * ns), precision);



    left = matrix_lib::Matrix{{10, -5, 0, 38, 43, -3, 5, -16, 3, 11, -7, 19}, {-7, -1, 21, -4, -2, -42, 45, -35, 41, -27, 41, 2}, {40, -31, 41, -32, -41, -6, 30, 28, -47, 24, 6, 3}, {-7, 4, 19, -49, -16, 1, 25, -5, -34, 6, 29, -28}, {10, -2, -7, 21, 48, 13, -12, 23, -45, -14, 39, 46}, {46, -49, 20, 22, 14, -46, 3, 38, 0, -21, -33, 21}, {10, -42, -38, 36, -43, 30, 34, -39, -28, 18, -20, -1}, {-27, -25, 35, 50, 44, 31, -44, 39, -21, 41, -15, 38}, {-24, 47, 39, -18, 10, 6, -48, 34, -44, -6, 13, -11}, {4, 10, -20, -35, -26, -47, -21, 8, -50, 37, -37, -14}, {35, -36, 47, -41, 42, 6, 3, -5, 12, -17, 6, 28}, {-26, -13, 46, 46, 2, 39, -18, 34, -5, -46, 44, 5}, {12, -13, 2, -33, 7, 29, 41, -15, -42, -35, 48, -1}, {46, 23, -33, 18, -20, -38, 12, 24, 43, 42, 15, -1}};
    r = matrix_lib::rank(left);
    ns = matrix_lib::nullspace(left);
    EXPECT_EQ(ns.columns(), left.columns() - r);
    EXPECT_EQ(matrix_lib::rank(ns), std::min(ns.rows(), ns.columns()));
    EXPECT_LT(sum(left * ns), precision);



    left = matrix_lib::Matrix{{-1, 6, -7, 31, 19, -28, 26, 11, 35, 35, 4, 24, -27, -22, -10, 7, -46, -16, 46}, {-32, -3, -38, 1, 25, -19, 11, 38, 11, -46, 45, -38, -2, -47, 34, 42, 18, 39, -20}, {-20, -23, 8, 18, -13, -1, 36, 24, -3, -13, -50, 5, -27, -7, 2, 11, 41, -48, -30}, {-24, -41, -12, -32, 18, 16, 0, -48, 24, 17, -3, 6, -43, -37, 41, -48, 38, 35, -3}, {42, -12, -29, -3, -33, 50, -40, -18, -43, 32, -45, 27, 40, 15, -3, 27, -28, -18, -3}, {-39, -8, 38, -8, -24, 35, 0, 33, 37, -16, 22, -50, -1, -22, 48, 14, 7, -15, 18}, {-5, 21, -10, 7, 47, 19, 46, -26, -38, -11, -17, -19, -17, -25, 48, -15, 18, 38, 29}, {41, 34, -10, 0, 29, 25, -25, -40, -17, 46, -32, 38, 2, -8, 31, 5, -7, -16, -35}, {-39, -30, -40, -15, -38, 18, 15, 8, 23, 13, 0, -12, 31, -33, 21, 8, -45, 30, -21}, {33, -20, 34, -8, 46, -45, -23, 18, -47, 3, 22, 48, 24, -19, -20, -34, 0, 47, -43}, {7, 48, -50, -24, -43, 43, 17, -46, -34, 25, 10, 32, 27, 27, -47, 27, -39, -2, -17}, {-15, -43, -11, 30, 43, 2, -11, -24, -42, -6, 10, 12, -35, -11, 13, 2, 47, -3, -35}, {-28, 49, -12, -5, 4, 4, -43, 6, 25, -44, 20, -15, 1, -45, -25, -33, -6, 7, 39}, {11, -42, -31, 37, -37, -10, 22, -21, -10, -30, 42, 24, 10, 12, 23, 18, -43, 26, -14}, {37, 42, 5, -3, 30, -37, 42, -30, 43, -32, -32, -48, 4, -27, -6, 21, -24, 33, -6}, {-25, -38, 22, -21, 5, 1, 27, -44, 9, -31, 14, 31, -46, 36, 0, -14, 47, -39, -20}, {-2, 8, -8, -35, 3, 48, 27, -45, 26, 21, 10, 24, 39, -37, -43, 12, -27, 49, -40}, {-2, -25, -34, -40, 17, -35, -44, 45, 10, 8, -8, 31, 47, -37, 45, -27, 34, -36, 11}, {-29, -17, 17, 4, -18, -25, 46, 50, 33, 17, 23, -1, -34, -42, 0, -11, -26, -14, 17}, {-23, 14, -9, -6, 47, -44, 46, 9, 42, -20, 45, -33, 20, -44, 43, -36, 41, 0, -2}, {42, 47, 0, 49, -50, 23, -34, 47, 13, -37, -29, 8, -36, 13, -42, -39, -11, -36, 1}, {23, 48, -2, -39, -28, 16, -38, 36, 15, -11, 5, 50, -17, 5, 29, 12, -50, 23, 17}, {-15, 47, -17, -26, -27, 32, 3, 21, -18, 8, -19, 36, -48, 48, -32, -24, -38, -48, 13}, {-43, 50, -5, -15, -3, 38, -20, -12, -12, -41, 10, 50, -32, -25, 42, 17, -22, -41, 38}};
    r = matrix_lib::rank(left);
    ns = matrix_lib::nullspace(left);
    EXPECT_EQ(ns.columns(), left.columns() - r);
    EXPECT_EQ(matrix_lib::rank(ns), std::min(ns.rows(), ns.columns()));
    EXPECT_LT(sum(left * ns), precision);



    left = matrix_lib::Matrix{{-47, 8, -40, -11, -21, 29, 34, -42, -39, 2, 48, -27, -3, 11, -25, -9, -4}, {35, 13, 1, -6, -44, -25, 41, 48, -50, 35, -1, -18, -33, -29, -40, -9, 37}, {32, 3, 48, -23, -6, -11, 0, -46, 26, 21, 7, 21, 30, -45, 48, -20, 7}, {11, 44, 2, -26, -48, -42, 25, 8, 3, -2, 29, -19, 20, -35, 1, -14, -40}, {43, 44, 33, 42, -14, 26, 42, 46, 20, 40, 43, -13, -10, 15, -14, -6, -45}, {-33, 0, -29, 36, -48, 24, -1, -49, -16, 15, -3, 26, -46, -1, 15, -46, -42}, {-27, 49, 32, -19, -21, -26, 8, -18, -25, 24, 13, 22, -39, -23, 8, 19, 12}, {38, 5, 45, -22, 34, 8, 47, -34, 23, 48, -45, -42, 28, -21, -5, -2, 37}, {38, -36, 27, -10, 27, 20, 12, 17, 2, -33, 31, -14, 36, 8, -42, -35, -40}, {20, -33, 24, -12, 9, 32, -20, 13, -29, 2, -29, -16, -5, 17, 10, -47, -11}, {22, -14, -39, 25, 48, -45, -31, -47, -17, 22, 27, 14, -17, 25, 28, 10, -50}, {45, 30, -15, -12, -40, 12, 46, -21, 5, 33, -24, -3, -31, -33, 46, 33, 29}, {-50, -27, -19, 40, -10, -42, 48, -16, 40, 0, -18, 33, 1, -42, -4, -36, 25}, {40, -9, 35, 39, -9, -34, 18, 39, -26, -49, -19, 37, -13, 22, 44, 47, -35}, {-50, -23, 48, 9, 45, 23, 49, 35, -44, 1, 44, 37, 25, 1, 3, 46, 38}, {28, -7, 29, 50, -48, 20, 38, -39, 27, 23, -42, -10, -50, 28, 17, 38, -34}, {-27, -32, 2, 38, 9, -25, 43, 49, -7, -15, -25, -25, 1, -12, 29, -20, 31}, {40, 44, -10, -48, 42, 0, -10, 38, 30, -23, -23, 16, -35, 8, 43, -40, -32}, {-19, 9, 35, -36, 9, 31, -34, -24, 7, 29, -7, 48, 7, 31, -19, 19, 36}, {-37, -45, -2, 29, 30, 23, -31, 13, 16, 16, -24, -21, -44, 28, -19, -46, 39}};
    r = matrix_lib::rank(left);
    ns = matrix_lib::nullspace(left);
    EXPECT_EQ(ns.columns(), left.columns() - r);
    EXPECT_EQ(matrix_lib::rank(ns), std::min(ns.rows(), ns.columns()));
    EXPECT_LT(sum(left * ns), precision);



    left = matrix_lib::Matrix{{47, -2, -15}, {2, 12, 44}, {30, 44, 35}, {-16, 10, 12}, {-3, 36, -29}};
    r = matrix_lib::rank(left);
    ns = matrix_lib::nullspace(left);
    EXPECT_EQ(ns.columns(), left.columns() - r);
    EXPECT_EQ(matrix_lib::rank(ns), std::min(ns.rows(), ns.columns()));
    EXPECT_LT(sum(left * ns), precision);



    left = matrix_lib::Matrix{{16, 47, -46, -3, 42, -18, 18, -6}, {22, -47, -11, -10, -20, 4, -34, 47}, {3, -14, -1, 24, 10, 48, 33, 32}, {-24, 50, -26, -33, 1, 17, -5, -35}, {-26, -11, 24, -4, 32, -27, 29, 25}, {45, -9, -6, 6, -19, -13, 43, -14}, {20, -3, 1, -26, -10, -41, 11, 31}, {31, -31, 50, 21, -10, -18, 44, 40}, {-25, 42, 45, 40, -15, 28, 24, -15}, {8, -10, 37, -33, 26, 49, 15, -40}, {-3, -10, -16, -42, 3, -50, 37, 40}, {37, -24, -23, 31, 2, 40, 39, -40}};
    r = matrix_lib::rank(left);
    ns = matrix_lib::nullspace(left);
    EXPECT_EQ(ns.columns(), left.columns() - r);
    EXPECT_EQ(matrix_lib::rank(ns), std::min(ns.rows(), ns.columns()));
    EXPECT_LT(sum(left * ns), precision);



    left = matrix_lib::Matrix{{-8, -4, -14, -31, -11, -31, 5}, {22, -40, -26, -18, 44, 32, 37}, {-16, -3, 44, -37, -42, -23, 4}, {21, 11, 20, 50, -3, -25, 18}, {-5, 12, 32, 23, 2, -13, 14}, {3, -28, 32, 42, 44, 11, -39}, {30, -15, -44, -45, 41, -50, 30}, {-44, 36, 40, 27, 16, 37, 26}, {-40, -15, -7, 5, -22, -19, 22}, {-19, 44, -14, 20, 36, 34, -43}, {21, -27, 24, -44, -20, 22, 18}, {23, 22, -27, 1, -12, -36, -30}};
    r = matrix_lib::rank(left);
    ns = matrix_lib::nullspace(left);
    EXPECT_EQ(ns.columns(), left.columns() - r);
    EXPECT_EQ(matrix_lib::rank(ns), std::min(ns.rows(), ns.columns()));
    EXPECT_LT(sum(left * ns), precision);



    left = matrix_lib::Matrix{{-37, -11, -25, -28, -22, -36, 32, -7, 29, -33, 43, -31, 3, -46, 34, 42, 35, -37}, {42, -46, 44, 29, -43, 35, 4, 28, 31, -22, -17, -33, 42, -41, -3, 29, 49, 43}, {-7, 18, 12, 34, -4, 45, 39, 9, 21, -8, -21, 31, 0, -1, 13, 42, 44, 9}, {48, 3, 0, 22, 29, 23, -11, -40, -32, 0, -35, 37, 20, -13, -47, 8, -25, -10}, {47, 39, 35, 39, 43, -34, 22, 1, -41, -13, 27, -28, -30, 26, 37, -12, 43, -23}, {-14, 48, 13, -17, 38, 11, -45, 13, -24, 7, -18, 16, 44, 47, -33, 30, 49, -25}, {47, 18, -25, 22, 39, -48, 6, 27, 50, 24, -15, 19, -19, -35, -34, 33, -46, 30}, {50, 49, -20, -25, -29, 22, 25, 20, 26, -22, -13, -37, 8, -46, 34, -46, -6, -39}, {-44, 46, 25, 49, -16, 21, 21, -15, -29, 45, 41, 31, 0, 33, -23, 5, -18, -3}, {12, 3, 26, -19, 43, -20, -50, 50, -26, -11, -18, 2, 15, -45, -24, 45, 27, 22}, {0, -27, 4, 29, 26, -8, 26, 43, -15, -19, -19, 47, -29, 6, -45, 28, -27, -9}, {-36, 5, -39, -27, 43, 47, 7, 50, -29, 18, 15, 46, -22, -37, 19, -37, 24, 12}, {-20, 20, 7, -16, 33, 42, 6, -11, 44, 3, -16, -33, 22, -37, 36, -38, -18, 47}, {2, -9, 22, -8, -42, -49, -34, 43, 43, 32, 32, -4, 44, -25, 40, -22, -33, 18}, {6, -15, -17, -34, 48, -24, 18, -21, 38, 28, 23, 18, -49, 50, -7, 40, 50, -40}, {-42, -29, -4, -19, 4, -3, 17, 11, 15, 39, -40, 13, 11, -34, 14, -2, -8, -24}, {-3, -44, -9, -4, 33, -18, -31, 49, -13, 46, -6, 18, -46, -45, -1, 20, 31, -37}, {-7, -2, -27, 24, 4, -19, -48, -49, 2, 26, -31, 27, 45, -40, 15, 11, -50, 22}, {-43, 23, 28, 4, 33, 33, 4, 8, -49, -33, -9, 35, -15, -11, 32, 5, -11, 19}, {-2, -45, 42, -26, -29, 26, 4, 14, -46, 24, -33, -6, -8, -3, 8, -29, -32, -3}, {50, 40, -4, 10, -19, -28, 17, 34, -25, -39, -17, -38, 30, -3, -15, -25, -39, 25}, {30, 35, 39, 49, 14, 36, -1, 19, 3, -3, 26, 30, -30, -18, -3, 21, -4, 7}};
    r = matrix_lib::rank(left);
    ns = matrix_lib::nullspace(left);
    EXPECT_EQ(ns.columns(), left.columns() - r);
    EXPECT_EQ(matrix_lib::rank(ns), std::min(ns.rows(), ns.columns()));
    EXPECT_LT(sum(left * ns), precision);



    left = matrix_lib::Matrix{{6, 32, -42}, {39, -42, -21}, {-5, -26, -36}, {30, 39, -26}, {-21, -30, -36}, {-32, -27, 44}, {-48, -28, 5}};
    r = matrix_lib::rank(left);
    ns = matrix_lib::nullspace(left);
    EXPECT_EQ(ns.columns(), left.columns() - r);
    EXPECT_EQ(matrix_lib::rank(ns), std::min(ns.rows(), ns.columns()));
    EXPECT_LT(sum(left * ns), precision);



    left = matrix_lib::Matrix{{-16, 43, -28, 4, 7, 50, 44, -49, -17, 38}, {-35, 46, 42, 17, -20, -6, -40, 29, -11, -13}, {13, 26, 18, -2, -2, -37, 19, 0, -22, 15}, {3, -12, 43, -20, -32, 30, 22, -1, 16, -12}, {35, -29, -27, -33, -9, 30, -46, 24, -40, -45}, {-29, 32, -44, 3, -8, 49, -5, -39, -15, -16}, {-1, 0, 32, 36, -43, -7, -32, 50, -15, -23}, {4, -5, 33, -26, -27, 1, 31, 46, 39, 37}, {-10, -39, 36, -33, 8, 30, 5, 45, 18, -48}, {-7, 37, -3, 28, -34, 39, 7, -17, 31, 12}, {-41, -45, 18, 21, 18, -7, -8, -12, -28, 29}, {-42, 39, 46, 32, -50, 38, 47, 41, -36, 43}};
    r = matrix_lib::rank(left);
    ns = matrix_lib::nullspace(left);
    EXPECT_EQ(ns.columns(), left.columns() - r);
    EXPECT_EQ(matrix_lib::rank(ns), std::min(ns.rows(), ns.columns()));
    EXPECT_LT(sum(left * ns), precision);



    left = matrix_lib::Matrix{{-8, -37, -11, 28, 40, -6, 12, -27, -3, -8, 3, 4, -41, -39, -13, -13}, {-20, 25, 35, -7, -29, -50, -15, 13, -12, -5, -27, 32, -48, -26, -22, -44}, {-4, -4, -10, -8, 2, -5, 45, 31, 30, 20, -42, -36, -7, 7, 34, 18}, {9, -4, 40, 37, -14, 1, -37, 48, -5, -31, -12, -21, 15, -8, 39, 8}, {-43, -36, -33, 28, 14, -20, 34, 25, 1, 46, 8, 43, -42, -23, -36, -21}, {-39, -29, -1, 47, 30, 26, -50, 23, -2, -37, 37, 49, -6, 37, 7, 3}, {-40, 3, 45, -21, 14, -45, 43, -11, 40, 45, -45, 36, -35, -25, -10, -9}, {46, -13, 22, -48, 48, 50, 8, 3, -45, -3, -40, 13, -15, 17, 2, 0}, {-46, -46, 11, 18, -50, -33, 38, 30, -30, 30, 23, -38, 4, 16, -8, 1}, {-4, 25, -9, -12, 30, 20, -8, 41, 2, 39, 23, 42, -48, 31, -11, -36}, {-38, -17, 10, 13, 45, 26, 16, 25, -2, 28, 44, -4, -43, 9, 14, -45}, {-49, 38, 22, 28, 6, 35, -44, -14, 0, 21, 3, -42, 25, -33, -23, -43}, {19, 20, -8, 3, 31, -41, -1, -2, -2, -24, -41, 2, -32, 7, -32, -4}, {1, 16, -42, -22, -48, 45, -32, -13, 44, -24, 5, -45, 4, 29, 45, -28}, {-42, -8, 42, -19, -18, 46, 26, -10, -42, 26, -41, 45, 19, 26, 12, 49}, {-20, 3, -22, -26, -8, -30, -40, -40, 20, -18, 23, -12, 48, 26, -50, -16}, {30, 44, 49, -3, 6, 41, 19, -38, 8, -40, 18, 18, 39, -21, 28, -48}, {7, -41, 33, 47, 21, -40, 50, 25, 30, 1, 3, -27, -46, 26, -12, -12}, {3, -28, 12, -11, -3, -17, 15, -36, -32, -4, -49, -27, 29, 0, 23, 39}, {45, -45, -6, 7, -29, 46, 0, -34, 48, 7, -10, -36, -15, 20, -49, 39}, {-47, -15, -24, 46, 14, -10, -43, -3, 4, -9, 14, 13, -21, -37, 11, -25}};
    r = matrix_lib::rank(left);
    ns = matrix_lib::nullspace(left);
    EXPECT_EQ(ns.columns(), left.columns() - r);
    EXPECT_EQ(matrix_lib::rank(ns), std::min(ns.rows(), ns.columns()));
    EXPECT_LT(sum(left * ns), precision);

}
